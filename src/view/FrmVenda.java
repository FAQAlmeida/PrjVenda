package view;

import dao.DaoCliente;
import dao.DaoItemVenda;
import dao.DaoVenda;
import java.awt.Component;
import java.awt.event.ItemEvent;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author Cauê, Renan Casagrande e Otávio
 */
public class FrmVenda extends javax.swing.JFrame {

    // Armazena os dados que alimentaram cmbCliente
    ArrayList<DaoCliente> cli;
    // Itens temporários
    ArrayList<DaoItemVenda> it;
    // Formatos para dinheiro (nfPreco) e data (mfData)
    NumberFormatter nfPreco;
    MaskFormatter mfData;
    // Variáveis de referência
    boolean alterar = false;
    boolean incluir = false;
    boolean alterarItem = false;
    boolean incluirItem = false;
    boolean encerrado = false;

    /**
     * Creates new form FrmVenda
     */
    public FrmVenda() throws ParseException, SQLException, ClassNotFoundException {

        initComponents();
        // Formato para os valores monetários
        DecimalFormat df = new DecimalFormat("R$ #,###,##0.00;-R$ #,###,##0.00");
        nfPreco = new NumberFormatter(df);
        nfPreco.setValueClass(Double.class);
        // Formato para as datas
        try {
            // Preenchendo o ArrayList 'cli' e o cmbCliente com os dados
            DaoCliente cliente = new DaoCliente();
            cli = new ArrayList<DaoCliente>();
            cli.addAll(cliente.Pesquisar(cliente));
            //cmbCliente.removeAllItems();
            for (DaoCliente daoCli : cli) {
                cmbCliente.addItem(String.valueOf(daoCli.getCodCli()));
            }
            cmbCliente.setSelectedIndex(0);
            // Preparando o ArrayList 'it'
            it = new ArrayList<DaoItemVenda>();
            // Inicializando os formatos de data
            mfData = new MaskFormatter("##/##/####");
            mfData.setPlaceholderCharacter('_');
            mfData.setValueContainsLiteralCharacters(true);
            mfData.setValueClass(String.class);
            DefaultFormatterFactory dffData = new DefaultFormatterFactory(mfData);
            // Aplicando o formato da data
            txtDataVenda.setFormatterFactory(dffData);
            txtDataEntrega.setFormatterFactory(dffData);
        } catch (ParseException e) {
            throw new ParseException("Ocorreu um erro no Formulário de vendas: \n"
                    + e.getMessage(), 0);
        } catch (SQLException e) {
            throw new SQLException("Ocorreu um erro no Formulário de vendas: \n"
                    + e.getMessage(), "Erro");
        } catch (ClassNotFoundException e) {
            throw new ClassNotFoundException("Ocorreu um erro no Formulário de vendas: \n"
                    + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDetalhes = new javax.swing.JLabel();
        pnlVenda = new javax.swing.JPanel();
        pnlCamposVenda = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNumVenda = new javax.swing.JTextField();
        txtCliente = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtDataVenda = new javax.swing.JFormattedTextField();
        cmbCliente = new javax.swing.JComboBox<>();
        scpObs = new javax.swing.JScrollPane();
        txtObs = new javax.swing.JTextArea();
        txtDataEntrega = new javax.swing.JFormattedTextField();
        pnlBotoes = new javax.swing.JPanel();
        btnIncluir = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnPesquisar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnGravar = new javax.swing.JButton();
        scpVendas = new javax.swing.JScrollPane();
        tblVendas = new javax.swing.JTable();
        pnlItens = new javax.swing.JPanel();
        btnIncluirDetalhe = new javax.swing.JButton();
        btnAlterarDetalhe = new javax.swing.JButton();
        btnPesquisarDetalhe = new javax.swing.JButton();
        btnExcluirDetalhe = new javax.swing.JButton();
        btnEncerrarDetalhe = new javax.swing.JButton();
        scpItens = new javax.swing.JScrollPane();
        tblItens = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        pnlTotal = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        txtTotalVenda = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        lblDetalhes.setText("Detalhes:");

        pnlVenda.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        pnlCamposVenda.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Núm Venda:");

        txtNumVenda.setEnabled(false);
        txtNumVenda.setPreferredSize(new java.awt.Dimension(150, 20));

        txtCliente.setPreferredSize(new java.awt.Dimension(150, 20));

        jLabel2.setText("Cliente:");

        jLabel3.setText("Data Entrega:");

        jLabel4.setText("Obs:");

        jLabel5.setText("Data Venda:");

        txtDataVenda.setPreferredSize(new java.awt.Dimension(150, 20));

        cmbCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClienteActionPerformed(evt);
            }
        });

        txtObs.setColumns(20);
        txtObs.setRows(5);
        txtObs.setPreferredSize(new java.awt.Dimension(221, 80));
        scpObs.setViewportView(txtObs);

        txtDataEntrega.setPreferredSize(new java.awt.Dimension(150, 20));

        javax.swing.GroupLayout pnlCamposVendaLayout = new javax.swing.GroupLayout(pnlCamposVenda);
        pnlCamposVenda.setLayout(pnlCamposVendaLayout);
        pnlCamposVendaLayout.setHorizontalGroup(
            pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scpObs))
                    .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                        .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNumVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDataVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(249, 249, 249)
                        .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39))
                            .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cmbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)))
                        .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDataEntrega, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE))))
                .addGap(73, 73, 73))
        );
        pnlCamposVendaLayout.setVerticalGroup(
            pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCamposVendaLayout.createSequentialGroup()
                        .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtDataEntrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCamposVendaLayout.createSequentialGroup()
                        .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtNumVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtDataVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(pnlCamposVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(scpObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlCamposVendaLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)))
                .addContainerGap())
        );

        pnlBotoes.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnIncluir.setText("Incluir");
        btnIncluir.setPreferredSize(new java.awt.Dimension(100, 30));
        btnIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncluirActionPerformed(evt);
            }
        });

        btnAlterar.setText("Alterar");
        btnAlterar.setPreferredSize(new java.awt.Dimension(100, 30));
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.setPreferredSize(new java.awt.Dimension(100, 30));
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.setPreferredSize(new java.awt.Dimension(100, 30));
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnSair.setText("Sair");
        btnSair.setPreferredSize(new java.awt.Dimension(100, 30));
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.setPreferredSize(new java.awt.Dimension(100, 30));
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnGravar.setText("Gravar");
        btnGravar.setPreferredSize(new java.awt.Dimension(100, 30));
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBotoesLayout = new javax.swing.GroupLayout(pnlBotoes);
        pnlBotoes.setLayout(pnlBotoesLayout);
        pnlBotoesLayout.setHorizontalGroup(
            pnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotoesLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btnIncluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlBotoesLayout.setVerticalGroup(
            pnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBotoesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBotoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnIncluir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        tblVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Venda", "Cliente", "Nome", "Data da Venda", "Entrega em", "Obs"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblVendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblVendasMouseClicked(evt);
            }
        });
        scpVendas.setViewportView(tblVendas);
        if (tblVendas.getColumnModel().getColumnCount() > 0) {
            tblVendas.getColumnModel().getColumn(5).setHeaderValue("Obs");
        }

        javax.swing.GroupLayout pnlVendaLayout = new javax.swing.GroupLayout(pnlVenda);
        pnlVenda.setLayout(pnlVendaLayout);
        pnlVendaLayout.setHorizontalGroup(
            pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlBotoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(scpVendas)
            .addGroup(pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlCamposVenda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlVendaLayout.setVerticalGroup(
            pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlVendaLayout.createSequentialGroup()
                .addComponent(pnlBotoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 229, Short.MAX_VALUE)
                .addComponent(scpVendas, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(pnlVendaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlVendaLayout.createSequentialGroup()
                    .addGap(47, 47, 47)
                    .addComponent(pnlCamposVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(147, Short.MAX_VALUE)))
        );

        pnlBotoes.getAccessibleContext().setAccessibleName("pnlBotoes");

        pnlItens.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnIncluirDetalhe.setText("Incluir");
        btnIncluirDetalhe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncluirDetalheActionPerformed(evt);
            }
        });

        btnAlterarDetalhe.setText("Alterar");
        btnAlterarDetalhe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarDetalheActionPerformed(evt);
            }
        });

        btnPesquisarDetalhe.setText("Pesquisar");
        btnPesquisarDetalhe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarDetalheActionPerformed(evt);
            }
        });

        btnExcluirDetalhe.setText("Excluir");
        btnExcluirDetalhe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirDetalheActionPerformed(evt);
            }
        });

        btnEncerrarDetalhe.setForeground(new java.awt.Color(255, 0, 51));
        btnEncerrarDetalhe.setText("Encerrar");
        btnEncerrarDetalhe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncerrarDetalheActionPerformed(evt);
            }
        });

        tblItens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Descrição", "Quantidade", "Preço Unitário", "Subtotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scpItens.setViewportView(tblItens);

        javax.swing.GroupLayout pnlItensLayout = new javax.swing.GroupLayout(pnlItens);
        pnlItens.setLayout(pnlItensLayout);
        pnlItensLayout.setHorizontalGroup(
            pnlItensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlItensLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlItensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scpItens)
                    .addGroup(pnlItensLayout.createSequentialGroup()
                        .addComponent(btnIncluirDetalhe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAlterarDetalhe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExcluirDetalhe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPesquisarDetalhe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEncerrarDetalhe)))
                .addContainerGap())
        );
        pnlItensLayout.setVerticalGroup(
            pnlItensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlItensLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlItensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIncluirDetalhe)
                    .addComponent(btnAlterarDetalhe)
                    .addComponent(btnExcluirDetalhe)
                    .addComponent(btnPesquisarDetalhe)
                    .addComponent(btnEncerrarDetalhe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scpItens, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel6.setText("Vendas");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel7.setText("Total Venda:");

        txtTotalVenda.setPreferredSize(new java.awt.Dimension(72, 24));

        javax.swing.GroupLayout pnlTotalLayout = new javax.swing.GroupLayout(pnlTotal);
        pnlTotal.setLayout(pnlTotalLayout);
        pnlTotalLayout.setHorizontalGroup(
            pnlTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTotalLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTotalVenda, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlTotalLayout.setVerticalGroup(
            pnlTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTotalLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlTotalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtTotalVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDetalhes)
                            .addComponent(jLabel6))
                        .addGap(0, 815, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(pnlItens, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlVenda, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlVenda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDetalhes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlItens, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Atualiza tblItens caso exista itens cadastrados para a venda selecionada
     *
     * @param evt
     */

    private void tblVendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblVendasMouseClicked
        if (tblVendas.getRowCount() > 0) {
            DaoItemVenda item = new DaoItemVenda();
            item.setNumVenda((Integer) tblVendas.getValueAt(tblVendas.getSelectedRow(), 0));
            try {
                txtTotalVenda.setText("R$ 0,00");
                atualizaTableItens(item.Pesquisar(item));
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro no Banco de dados:\n"
                        + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro no driver de conexão:\n"
                        + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erroz: "
                        + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }

    }//GEN-LAST:event_tblVendasMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Object[] options = {"Sim", "Não"};
        if (JOptionPane.showOptionDialog(this, "Deseja mesmo sair?", "Aviso!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]) == JOptionPane.YES_OPTION) {
            dispose();
        }
    }//GEN-LAST:event_formWindowClosing

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        formWindowClosing(null);
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncluirActionPerformed
        DaoCliente cliente = new DaoCliente();
        try {
            habilitaBotoes(false, pnlBotoes);
            habilitaComponentes(false, pnlItens);
            habilitaComponentes(true, pnlCamposVenda);
            txtNumVenda.setEnabled(false);
            cmbClienteActionPerformed(null);
            txtObs.setEnabled(true);
            limpaCampos(pnlCamposVenda);
            txtObs.setText("");
            txtCliente.setText(cli.get(cmbCliente.getSelectedIndex()).getNome());
            txtNumVenda.requestFocus();
            incluir = true;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um errox: " + e.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnIncluirActionPerformed

    private void cmbClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClienteActionPerformed
        // Trocando o nome de acordo com a alteração em cmbCliente
        txtCliente.setText(cli.get(cmbCliente.getSelectedIndex()).getNome());
    }//GEN-LAST:event_cmbClienteActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed

        DaoVenda venda = new DaoVenda();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        try {
            if (incluir) {
                venda.setCodCli(Integer.valueOf(cmbCliente.getSelectedItem().toString()));
                venda.setDataVenda(sdf.parse(txtDataVenda.getText()));
                venda.setDataEntrega(sdf.parse(txtDataEntrega.getText()));
                venda.setObs(txtObs.getText());
                venda.Incluir();
            }
            if (alterar) {
                venda.setNumVenda(Integer.valueOf(txtNumVenda.getText()));
                venda.setCodCli(Integer.valueOf(cmbCliente.getSelectedItem().toString()));
                venda.setDataVenda(sdf.parse(txtDataVenda.getText()));
                venda.setDataEntrega(sdf.parse(txtDataEntrega.getText()));
                venda.setObs(txtObs.getText());
                venda.Alterar();
            }
            btnCancelarActionPerformed(null);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ocorreu um erroc: \n" + e.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        formWindowOpened(null);
        habilitaBotoes(true, pnlBotoes);
        limpaCampos(pnlCamposVenda);
        txtObs.setText("");
        habilitaComponentes(false, pnlCamposVenda);
        habilitaComponentes(true, pnlItens);
        txtObs.setEnabled(false);
        incluir = false;
        alterar = false;
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // Carregando os dados na inicialização do formulário
        // Modo similar ao do btnPesquisar
        DaoVenda venda = new DaoVenda();
        DaoItemVenda item = new DaoItemVenda();
        try {
            if (venda.Pesquisar(venda).isEmpty()) {
                JOptionPane.showMessageDialog(null, "Não há vendas cadastradas!",
                        "Atenção:", JOptionPane.WARNING_MESSAGE);
            } else {
                atualizaTableVendas(venda.Pesquisar(venda));
                tblVendas.addRowSelectionInterval(0, 0);
                item.setNumVenda((Integer) tblVendas.getValueAt(0, 0));
                if (item.Pesquisar(item).isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Não há Itens nessa venda!",
                            "Atenção:", JOptionPane.WARNING_MESSAGE);
                } else {
                    atualizaTableItens(item.Pesquisar(item));
                }
            }
            habilitaComponentes(false, pnlCamposVenda);
            habilitaBotoes(true, pnlBotoes);
            txtObs.setEnabled(false);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no Banco de dados:\n"
                    + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no driver de conexão:\n"
                    + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro x: " + e.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowOpened

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed

        DaoCliente cliente = new DaoCliente();
        try {
            habilitaBotoes(false, pnlBotoes);
            txtNumVenda.setEnabled(false);
            habilitaComponentes(false, pnlItens);
            habilitaComponentes(true, pnlCamposVenda);
            // Atualizando os Clientes na memória
            cli.clear();
            cli.addAll(cliente.Pesquisar(cliente));
            for (DaoCliente daoCli : cli) {
                cmbCliente.addItem(String.valueOf(daoCli.getCodCli()));
            }
            txtNumVenda.setEnabled(false);
            txtObs.setEnabled(true);
            if (tblVendas.getRowCount() > 0) {
                //linha selecionada no Jtable (tblVendas)
                int posLinha = tblVendas.getSelectedRow();
                //verificando se a linha foi selecionada, caso 'true' pega os
                //dados da respectiva linha e envia para os campos
                if (posLinha >= 0) {
                    txtNumVenda.setText(tblVendas.getValueAt(posLinha, 0).toString());
                    for (DaoCliente daoCli : cli) {
                        if (daoCli.getCodCli() == Integer.valueOf(tblVendas.getValueAt(posLinha, 1).toString())) {
                            cmbCliente.setSelectedIndex(cli.indexOf(daoCli));
                        }
                    }
                    txtCliente.setText(tblVendas.getValueAt(posLinha, 2).toString());
                    txtDataVenda.setValue(tblVendas.getValueAt(posLinha, 3).toString());
                    txtDataEntrega.setValue(tblVendas.getValueAt(posLinha, 4).toString());
                    txtObs.setText(tblVendas.getValueAt(posLinha, 5).toString());
                } else {
                    JOptionPane.showMessageDialog(null, "Selecione uma venda para alterar!",
                            "Erro", JOptionPane.ERROR_MESSAGE);
                    btnCancelarActionPerformed(null);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não há vendas cadastrados ainda!",
                        "Erro", JOptionPane.ERROR_MESSAGE);
                btnCancelarActionPerformed(null);
            }
            txtDataVenda.requestFocus();
            alterar = true;
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no Banco de dados:\n"
                    + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
            e.printStackTrace();
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no driver de conexão:\n"
                    + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um errox: " + e.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        try {
            //Verificando se temos venda selecionada os se existe vendas
            if (tblVendas.getSelectedRow() > 0) {
                //Apagando a venda selecionada
                Object[] options = {" Sim", "Não "};
                if (JOptionPane.showOptionDialog(this, "Deseja mesmo APAGAR a venda "
                        + "selecionada?", "Aviso:", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, //new ImageIcon(") , 
                        options, options[1]) == JOptionPane.YES_OPTION) {
                    DaoVenda dv = new DaoVenda();
                    DaoItemVenda di = new DaoItemVenda();
                    // Passamos o numero da venda desejado
                    di.setNumVenda(Integer.valueOf(tblVendas.getValueAt(
                            tblVendas.getSelectedRow(), 0).toString()));
                    dv.setNumVenda(di.getNumVenda());
                    // Devemos apagar primeiro os registros em "pc_ItemVenda",
                    // por causa do relacionamento.
                    di.Excluir();
                    if (dv.Excluir()) {
                        JOptionPane.showMessageDialog(null, "Venda excluida com sucesso!",
                                "Exclusão", JOptionPane.INFORMATION_MESSAGE);
                    }
                    // Atualizando os JTables (Vendas e Itens)
                    formWindowOpened(null);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um errov: "
                    + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        DaoVenda dv = new DaoVenda();
        DaoItemVenda div = new DaoItemVenda();
        try {
            // Recebendo o número da venda
            String numVendaTemp = JOptionPane.showInputDialog(this, "Informe o npumero da venda desejada:",
                    "Pesquisa:", JOptionPane.QUESTION_MESSAGE);
            // Se o número da Venda não for nulo
            if (numVendaTemp.trim().equals("")) {
                try {
                    atualizaTableVendas(dv.Pesquisar(dv));
                    tblVendas.setRowSelectionInterval(0, 0);
                    tblVendasMouseClicked(null);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "A venda não foi encontrada",
                            "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } else if (numVendaTemp != null) {
                dv.setNumVenda(Integer.valueOf(numVendaTemp));
                div.setNumVenda(dv.getNumVenda());
                if (dv.Pesquisar(dv).isEmpty()) {
                    JOptionPane.showMessageDialog(null, "A venda não foi encontrada",
                            "Erro", JOptionPane.ERROR_MESSAGE);
                } else { // Caso tenha sido encontrada
                    if (div.getNumVenda() < 1) {
                        dv.setNumVenda(0);
                        div.setNumVenda(dv.getNumVenda());
                    }
                    // Exibe as Vendas em tblVendas
                    atualizaTableVendas(dv.Pesquisar(dv));
                    // Seleciona a primeira linha de tblVendas
                    tblVendas.setRowSelectionInterval(0, 0);
                    // Chamada do evento click de tblVendas para atualizar tblItens
                    tblVendasMouseClicked(null);
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no DB: \n"
                    + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Operação um erro de classe: \n"
                    + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Operação cancelada! \n"
                    + "Ocorreu um erro no valor informado para o número da venda: \n"
                    + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um errob: \n"
                    + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnIncluirDetalheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncluirDetalheActionPerformed
        try {
            // Preparando para verificar se a venda possui itens no DB
            DaoItemVenda item = new DaoItemVenda();
            item.setNumVenda((Integer) tblVendas.getValueAt(tblVendas.getSelectedRow(), 0));
            // Caso esteja vazio o ArrayList retornado pelo método pesquisar
            // Vamos incluir o item retornado por 'FrmItemVenda' em 'it'
            if (item.Pesquisar(item).isEmpty()) {
                item = FrmItemVenda.showItemVenda(item);
                // Verificando se o produto já existe na venda
                for (DaoItemVenda daoIt : it) {
                    if (daoIt.getCodPro() == item.getCodPro()) {
                        JOptionPane.showMessageDialog(null, "O Produto já"
                                + " está cadastrado nessa venda!", "Erro:",
                                JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                if (item != null) {
                    it.add(item);
                    atualizaTableItens(it);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não é possivel ADICIONAR Itens nessa venda:"
                        + "\nA venda esta ENCERRADA!", "Erro:", JOptionPane.ERROR_MESSAGE);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no DB: \n" + e.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro de classes: \n" + e.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erron: \n" + e.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnIncluirDetalheActionPerformed

    private void btnEncerrarDetalheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncerrarDetalheActionPerformed
        // Verifica se 'it' possui Itens e caso ele NÃO esteja vazio
        if (!it.isEmpty()) {
            try {
                // Pedindo confirmação para encerrar a venda
                if (JOptionPane.showConfirmDialog(this, "Deseja mesmo ENCERRAR a venda!",
                        "Atenção", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)
                        == JOptionPane.YES_OPTION) {
                    for (DaoItemVenda daoItem : it) {
                        daoItem.Incluir();
                    }
                    // Limpando o ArrayList 'it' após incluir os itens no BD
                    it.clear();
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro no DB: \n" + e.getMessage(),
                        "Erro:", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro de classe: \n" + e.getMessage(),
                        "Erro:", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Não há produtos registrados para encerrar ou a venda esta encerrada");
        }
    }//GEN-LAST:event_btnEncerrarDetalheActionPerformed

    private void btnAlterarDetalheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarDetalheActionPerformed
        try {
            // Preparando para verificar se a venda possui itens no DB
            DaoItemVenda item = new DaoItemVenda();
            item.setNumVenda((Integer) tblVendas.getValueAt(tblVendas.getSelectedRow(), 0));
            // Caso esteja vazio o ArrayList retornando pelo método 'pesquisar',
            // vamos alterar o item selecionado em 'tblItens'
            if (item.Pesquisar(item).isEmpty()) {
                // Verificando se um item esta selecionado Ou se existe itens
                if (tblItens.getSelectedRow() >= 0) {
                    // Passando o item equivalente de 'it' para o 'FrmItemVenda'
                    item = it.get(tblItens.getSelectedRow());
                    if (item != null) {
                        // Trocando os valores no mesmo item
                        item = FrmItemVenda.showItemVenda(item);
                        // Verificando se o produto já existe na Venda
//                        for (DaoItemVenda daoIt : it) {
//                            if (daoIt.getCodPro() == item.getCodPro()) {
//                                JOptionPane.showMessageDialog(null, "O Produto já"
//                                        + " está cadastrado nessa venda!", "Erro:",
//                                        JOptionPane.ERROR_MESSAGE);
//                                return;
//                            }
//                        }
                        // Trocando os valores no mesmo item
                        it.set(tblItens.getSelectedRow(), item);
                        atualizaTableItens(it);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Selecione primeiro o item "
                            + "que deseja alterar!", "Erro:", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não é possivel ALTERAR Itens nessa venda:"
                        + "\nA venda esta ENCERRADA!", "Erro:", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no DB: \n" + e.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro de classe: \n" + e.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocorreu um errom: \n" + e.getMessage(),
                    "Erro:", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAlterarDetalheActionPerformed

    private void btnExcluirDetalheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirDetalheActionPerformed
        try {
            Object[] botoes = {" Sim ", " não "};
            DaoItemVenda item = new DaoItemVenda();
            item.setNumVenda((Integer) tblVendas.getValueAt(tblVendas.getSelectedRow(), 0));
            if (item.Pesquisar(item).isEmpty()) {
                if (tblItens.getSelectedRow() >= 0) {
                    item = it.get(tblItens.getSelectedRow());
                    if (JOptionPane.showOptionDialog(null, "Deseja MESMO apagar o item?", "Atenção:", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, botoes, botoes[1]) == JOptionPane.YES_NO_OPTION) {
                        it.remove(item);
                        atualizaTableItens(it);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Selecione primeiro o item que deseja excluir", "Erro:", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não é possível remover itens nessa venda, ela está encerrada", "Erro:", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro no DB", "Erro:", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null, "A classe do jdbc não foi encontrada", "Erro:", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmVenda.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro \n" + ex.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(FrmVenda.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnExcluirDetalheActionPerformed

    private void btnPesquisarDetalheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarDetalheActionPerformed
        DaoItemVenda item = new DaoItemVenda();
        String cod = JOptionPane.showInputDialog(null, "Informe o código do item para pesquisa", "Pesquisar", JOptionPane.QUESTION_MESSAGE);
        item.setNumVenda((Integer) tblVendas.getValueAt(tblVendas.getSelectedRow(), 0));
        try {
            if (!cod.trim().equals("")) {
                item.setCodPro(Integer.parseInt(cod));
            }
            try {
                ArrayList<DaoItemVenda> listaClientes = item.Pesquisar(item);
                atualizaTableItens(listaClientes);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro no DB \n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null, "Ocorreu de classe \n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erro\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Informe um código válido", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnPesquisarDetalheActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new FrmVenda().setVisible(true);
                } catch (ParseException ex) {
                    Logger.getLogger(FrmVenda.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(FrmVenda.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(FrmVenda.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    /**
     * Digitar os Métodos; limpaTable, habilitaBotoes, habilitaComponentes,
     * atualizaTableVendas, atualizaTableVendas, atualizaTableItens e
     * limpaCampos. Esses métodos citados acima, devem estar digitados dentro da
     * classe do 'FrmVendas' ANTES DE COMEÇAR A CODIFICAR os botões e eventos,
     * pois estes SÃO PRÉ-REQUISITOS!!!
     */
    private void limpaTable(JTable table) {
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        while (dtm.getRowCount() > 0) {
            dtm.removeRow(0);
        }
    }

    private void atualizaTableVendas(ArrayList<DaoVenda> vendas) {
        //Limpando os dados da Tabela
        limpaTable(tblVendas);
        //Objeto para formatar Datas
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        if (vendas.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Não foram encontradas Vendas"
                    + " no banco de dados.",
                    "Atenção:", JOptionPane.INFORMATION_MESSAGE);
        } else {
            //Modelo de tabela para popular tblClientes (JTable)
            DefaultTableModel dadosVendas = (DefaultTableModel) tblVendas.getModel();
            //Linha em branco para incluir na tabela e criar espaço para inserir dados
            String Linha[] = new String[]{"", "", "", "", "", ""};
            try {
                //A variavel 'posicao' foi criado para servir
                //com referência para posição da linha
                int posicao = -1;
                for (DaoVenda venda : vendas) {
                    posicao++;
                    //incluindo linha em branco
                    dadosVendas.addRow(Linha);
                    //preenchendo a linha em branco, célula a célula
                    dadosVendas.setValueAt(venda.getNumVenda(), posicao, 0);
                    dadosVendas.setValueAt(venda.getCodCli(), posicao, 1);
                    dadosVendas.setValueAt(venda.getNome(), posicao, 2);
                    dadosVendas.setValueAt(sdf.format(venda.getDataVenda()), posicao, 3);
                    dadosVendas.setValueAt(sdf.format(venda.getDataEntrega()), posicao, 4);
                    dadosVendas.setValueAt(venda.getObs(), posicao, 5);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erros: " + e.getMessage(), "Erro:", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void atualizaTableItens(ArrayList<DaoItemVenda> itens) {
        //Limpando os dados da tabela (na seção Detalhes do JFrame)
        limpaTable(tblItens);
        double total = 0;
        if (itens.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Não foram cadastrados Itens nessa"
                    + " venda!",
                    "Atenção:", JOptionPane.WARNING_MESSAGE);
        } else {
            //Modelo de tabela para popular tblClientes (JTable)
            DefaultTableModel dadosItens = (DefaultTableModel) tblItens.getModel();
            //Linha em branco para incluir na tabela e criar espaço para inserir dados
            String Linha[] = new String[]{"", "", "", "", ""};
            try {
                // A variavel 'posição' foi criada para servir como
                //referência para posição da linha
                int posicao = -1;
                for (DaoItemVenda item : itens) {
                    posicao++;
                    //incluindo linha em branco
                    dadosItens.addRow(Linha);
                    //preenchendo a linha em branco, célula a célula
                    dadosItens.setValueAt(item.getCodPro(), posicao, 0);
                    dadosItens.setValueAt(item.getDescricao(), posicao, 1);
                    dadosItens.setValueAt(item.getQuantidade(), posicao, 2);

                    //Usando o NumberFormatter 'nfPreco' para formatar os valores
                    dadosItens.setValueAt(nfPreco.valueToString(item.getPrecoUnit()), posicao, 3);
                    dadosItens.setValueAt(nfPreco.valueToString(item.getSubtotal()), posicao, 4);

                    total = total + item.getSubtotal();
                }

                // Após ter acumulado a somatória dos itens dessa Venda em 'total',
                // vamos exibir formatado em txtTotal
                txtTotalVenda.setText(nfPreco.valueToString(total));
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Ocorreu um erroa: " + e.getMessage(),
                        "Erro:", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void habilitaBotoes(boolean hab, JPanel panel) {
        for (Component jcomp : panel.getComponents()) {
            if (jcomp instanceof JButton) {
                jcomp.setEnabled(hab);
                /**
                 * Comparando o conteúdo do atributo 'AcessibleName' do objeto
                 * para descobrir se é o 'btnCancelar' ou 'btnGravar' eles devem
                 * ter seu valor alterado para permitir essa comparação
                 */
                if ((jcomp.getAccessibleContext().getAccessibleName().equals("Cancelar"))) {
                    jcomp.setEnabled(!hab);
                }
                if ((jcomp.getAccessibleContext().getAccessibleName().equals("Gravar"))) {
                    jcomp.setEnabled(!hab);
                }
            }
        }
    }

    private void habilitaComponentes(boolean hab, JComponent container) {
        for (Component jcomp : container.getComponents()) {
            jcomp.setEnabled(hab);
        }
    }

    private void limpaCampos(JComponent container) {
        for (Component jcomp : container.getComponents()) {
            if (jcomp instanceof JTextField) {
                ((JTextField) jcomp).setText("");
            }
            if (jcomp instanceof JComboBox) {
                ((JComboBox) jcomp).setSelectedIndex(0);
            }
            if (jcomp instanceof JFormattedTextField) {
                ((JFormattedTextField) jcomp).setValue("");
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnAlterarDetalhe;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEncerrarDetalhe;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnExcluirDetalhe;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnIncluir;
    private javax.swing.JButton btnIncluirDetalhe;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnPesquisarDetalhe;
    private javax.swing.JButton btnSair;
    private javax.swing.JComboBox<String> cmbCliente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lblDetalhes;
    private javax.swing.JPanel pnlBotoes;
    private javax.swing.JPanel pnlCamposVenda;
    private javax.swing.JPanel pnlItens;
    private javax.swing.JPanel pnlTotal;
    private javax.swing.JPanel pnlVenda;
    private javax.swing.JScrollPane scpItens;
    private javax.swing.JScrollPane scpObs;
    private javax.swing.JScrollPane scpVendas;
    private javax.swing.JTable tblItens;
    private javax.swing.JTable tblVendas;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JFormattedTextField txtDataEntrega;
    private javax.swing.JFormattedTextField txtDataVenda;
    private javax.swing.JTextField txtNumVenda;
    private javax.swing.JTextArea txtObs;
    private javax.swing.JTextField txtTotalVenda;
    // End of variables declaration//GEN-END:variables
}
